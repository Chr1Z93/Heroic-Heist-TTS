require("libraries/GuidReferences")
local searchLib = require("libraries/SearchLib")

local speed     = 0

function onSave() return speed end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    speed = tonumber(savedData)
  end

  -- shared parameters
  local buttonParameters = {
    function_owner = self,
    height = 0,
    width = 0,
    scale = { 0.2, 0.2, 0.2 },
    font_size = 625,
    font_color = { 0, 0, 0 }
  }

  -- speed button
  buttonParameters.label = speed
  buttonParameters.click_function = "none"
  buttonParameters.position = { x = 1.418, y = 0.2, z = -0.7167 }
  self.createButton(buttonParameters)

  PLAYERMAT = getObjectFromName("Playermat" .. self.getMemo())

  Wait.time(updateDisplay, 2, -1)
end

function setNewSpeed(newSpeed)
  speed = newSpeed
  self.editButton({ index = 0, label = speed })
end

function getSpeed()
  return speed
end

function reset()
  for _, obj in ipairs(searchLib.onObject(self, "isCard")) do
    obj.destruct()
  end
end

function updateDisplay()
  -- get snap point positions
  local positions = {}
  for _, snap in ipairs(self.getSnapPoints()) do
    local pos = self.positionToWorld(snap.position)
    pos.y = pos.y + 0.05
    table.insert(positions, pos)
  end

  -- get rotation of deckmat
  local selfRot = self.getRotation()

  -- get list of new cards
  local cardDataList = {}

  -- cards in hand (will be displayed face-up)
  for _, card in ipairs(Player[self.getMemo()].getHandObjects()) do
    local data = card.getData()
    data.Transform.rotX = selfRot.x
    data.Transform.rotY = selfRot.y
    data.Transform.rotZ = 0
    table.insert(cardDataList, data)
  end

  -- cards on playermat (will be displayed opposite of current rotation)
  for _, obj in ipairs(searchLib.onObject(PLAYERMAT, "isCardOrDeck")) do
    if obj.type == "Card" then
      local data = obj.getData()
      data.Transform.rotX = selfRot.x
      data.Transform.rotY = selfRot.y
      data.Transform.rotZ = obj.getRotation().z + 180
      table.insert(cardDataList, data)
    else
      local deckRotation = obj.getRotation()
      for _, cardData in ipairs(obj.getData().ContainedObjects) do
        cardData.Transform.rotX = selfRot.x
        cardData.Transform.rotY = selfRot.y
        cardData.Transform.rotZ = deckRotation.z + 180
        table.insert(cardDataList, cardData)
      end
    end
  end

  -- skip this update if not 8 cards found
  if #cardDataList ~= 8 then return end

  -- sort list by id
  table.sort(cardDataList, function(a, b) return a.GMNotes < b.GMNotes end)

  -- remove current cards
  reset()

  -- spawn the card list
  for i, data in ipairs(cardDataList) do
    -- force correct position before spawning
    data.Transform.posX = positions[i].x
    data.Transform.posY = positions[i].y
    data.Transform.posZ = positions[i].z
    data.Locked = true

    spawnObjectData({ data = data })
  end
end
