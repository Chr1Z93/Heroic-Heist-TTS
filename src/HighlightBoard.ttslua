require("CardMetadata")

local colorTable = {
  ["0"] = "Green",
  ["25"] = "Pink",
  ["50"] = "Orange",
  ["75"] = "Red"
}

function onLoad()
  createXML()
end

function createXML()
  local xml = {}
  for _, color in ipairs({ "Blue", "Red" }) do
    for row = 1, 5 do
      for col = 1, 5 do
        local xPos = -81 + (col - 1) * 40.5
        local yPos = -75 + (row - 1) * 40
        local zPos = -55
        local elem = {
          tag = "Panel",
          attributes = {
            id         = color .. "Panel" .. row .. col,
            width      = 32,
            height     = 32,
            position   = xPos .. " " .. yPos .. " " .. zPos,
            visibility = "Black"
          },
          children = {
            {
              tag = "Mask",
              attributes = { image = "https://github.com/Chr1Z93/Heroic-Heist-TTS/blob/main/assets/highlight_circle.png?raw=true" },
              children = {
                tag = "Panel",
                attributes = {
                  id = color .. "Circle" .. row .. col,
                  onClick = "makeChoice",
                  visibility = "Black",
                  color = "White"
                }
              }
            },
            {
              tag = "Mask",
              attributes = {
                image = "https://github.com/Chr1Z93/Heroic-Heist-TTS/blob/main/assets/highlight_arrow.png?raw=true",
                id = color .. "ArrowMask" .. row .. col
              },
              children = {
                tag = "Panel",
                attributes = {
                  id = color .. "Arrow" .. row .. col,
                  onClick = "makeChoice",
                  visibility = "Black",
                  color = "Green"
                }
              }
            },
            {
              tag = "Mask",
              attributes = {
                image = "https://github.com/Chr1Z93/Heroic-Heist-TTS/blob/main/assets/highlight_connected.png?raw=true",
                id = color .. "ConnectedMask" .. row .. col
              },
              children = {
                tag = "Panel",
                attributes = {
                  id = color .. "Connected" .. row .. col,
                  onClick = "makeChoice",
                  visibility = "Black",
                  color = "Red"
                }
              }
            },
            {
              tag = "Mask",
              attributes = {
                image = "https://github.com/Chr1Z93/Heroic-Heist-TTS/blob/main/assets/highlight_connected.png?raw=true",
                id = color .. "Connected2Mask" .. row .. col,
                rotation = "0 0 90"
              },
              children = {
                tag = "Panel",
                attributes = {
                  id = color .. "Connected2" .. row .. col,
                  onClick = "makeChoice",
                  visibility = "Black",
                  color = "Red"
                }
              }
            }
          }
        }
        table.insert(xml, elem)
      end
    end
  end
  self.UI.setXmlTable(xml)
end

function showHighlight(params)
  -- reassign some variables for readability
  local playerColor = params.playerColor
  local row = params.targetGrid.row
  local col = params.targetGrid.col
  local rot = params.targetGrid.rot
  local rot2 = params.targetGrid.rot2

  -- get metadata for the card
  local md = METADATA[params.cardId]
  local type = tostring(md.damage or 0)

  local showArrow = (md.directionMove ~= nil)
  local showConnected = (params.targetGrid.connected == true)
  local showConnected2 = (rot2 ~= nil)
  local elementsToShow = {}

  -- handle large arrow movement
  if showArrow then
    elementsToShow.Arrow = true
    local arrowRot = getRotationBetweenGrids(params.targetGrid, params.grid)
    setSpecificRotation(row, col, "ArrowMask", playerColor, arrowRot)

  -- handle connected spaces attacking
  elseif showConnected then
    elementsToShow.Connected = true
    setSpecificRotation(row, col, "ConnectedMask", playerColor, rot or 0)
    setSpecificColor(row, col, "Connected", playerColor, colorTable[type])

    -- show additional layer for corners
    if showConnected2 then
      elementsToShow.Connected2 = true
      setSpecificRotation(row, col, "Connected2Mask", playerColor, rot2)
      setSpecificColor(row, col, "Connected2", playerColor, colorTable[type])
    end

  -- handle regular movement
  else
    elementsToShow.Circle = true
    setSpecificColor(row, col, "Circle", playerColor, colorTable[type])
  end

  -- store the current cardId
  local panelId = playerColor .. "Panel" .. row .. col
  self.UI.setAttribute(panelId, "cardId", params.cardId)

  setSpecificVisibility(row, col, elementsToShow, playerColor)
end

-- hides all highlights for the specified playercolor
function hideAll(playerColor)
  for row = 1, 5 do
    for col = 1, 5 do
      setSpecificVisibility(row, col, {}, playerColor)
    end
  end
end

function setSpecificVisibility(row, col, visibleTypes, playerColor)
  local allTypes = { "Circle", "Arrow", "Connected", "Connected2" }
  local showPanel = false
  for _, type in ipairs(allTypes) do
    local colorString = "Black"
    if visibleTypes[type] == true then
      colorString = "Black|" .. playerColor
      showPanel = true
    end
    self.UI.setAttribute(playerColor .. type .. row .. col, "visibility", colorString)
  end

  -- update panel visibility
  local colorString = "Black"
  if showPanel then
    colorString = "Black|" .. playerColor
  end
  self.UI.setAttribute(playerColor .. "Panel" .. row .. col, "visibility", colorString)
end

function setSpecificColor(row, col, type, playerColor, elementColor)
  local elementID = playerColor .. type .. row .. col
  self.UI.setAttribute(elementID, "color", elementColor)
end

function setSpecificRotation(row, col, type, playerColor, rot)
  local elementID = playerColor .. type .. row .. col
  self.UI.setAttribute(elementID, "rotation", "0 0 " .. rot)
end

function makeChoice(player, _, elementId)
  if player.color == "Black" then return end

  local len = string.len(elementId)
  local row = tonumber(string.sub(elementId, len - 1, len - 1))
  local col = tonumber(string.sub(elementId, len, len))

  -- get cardId
  local panelId = player.color .. "Panel" .. row .. col
  local cardId = self.UI.getAttribute(panelId, "cardId")

  Global.call("registerChoice", { choiceGrid = { row = row, col = col }, playerColor = player.color, cardId = cardId })
end

function getRotationBetweenGrids(gridA, gridB)
  local rowDiff = gridA.row - gridB.row
  local colDiff = gridA.col - gridB.col

  local rot = 0
  if rowDiff < 0 and colDiff < 0 then
    rot = 180
  elseif rowDiff < 0 and colDiff > 0 then
    rot = 270
  elseif rowDiff > 0 and colDiff < 0 then
    rot = 90
  elseif rowDiff > 0 and colDiff > 0 then
    rot = 0
  elseif rowDiff == 0 and colDiff < 0 then
    rot = 135
  elseif rowDiff == 0 and colDiff > 0 then
    rot = 315
  elseif rowDiff < 0 and colDiff == 0 then
    rot = 225
  elseif rowDiff > 0 and colDiff == 0 then
    rot = 45
  end

  return rot
end

function oppositeColor(color)
  if color == "Blue" then
    return "Red"
  else
    return "Blue"
  end
end
