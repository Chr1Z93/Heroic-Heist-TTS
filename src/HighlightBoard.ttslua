require("CardMetadata")
require("libraries/GuidReferences")

local colorTable = {
  ["0"] = "Green",
  ["25"] = "Pink",
  ["50"] = "Orange",
  ["75"] = "Red"
}

function onLoad()
  createXML()
end

function createXML()
  local xml = {}
  for _, color in ipairs({ "Blue", "Red" }) do
    for row = 1, 5 do
      for col = 1, 5 do
        local xPos = -82 + (col - 1) * 41
        local yPos = -82 + (row - 1) * 41
        local zPos = -75
        local elem = {
          tag = "Panel",
          attributes = {
            id         = color .. "Panel" .. row .. col,
            width      = 25,
            height     = 25,
            position   = xPos .. " " .. yPos .. " " .. zPos,
            visibility = "Black"
          },
          children = {
            tag = "Mask",
            attributes = { image = "https://github.com/Chr1Z93/Heroic-Heist-TTS/blob/main/assets/highlight_circle.png?raw=true" },
            children = {
              tag = "Panel",
              attributes = {
                id = color .. "Circle" .. row .. col,
                onClick = "makeChoice",
                visibility = "Black",
                color = "White"
              }
            }
          },
          {
            tag = "Mask",
            attributes = { image = "https://github.com/Chr1Z93/Heroic-Heist-TTS/blob/main/assets/highlight_arrow.png?raw=true" },
            children = {
              tag = "Panel",
              attributes = {
                id = color .. "Arrow" .. row .. col,
                onClick = "makeChoice",
                visibility = "Black",
                color = "Green"
              }
            }
          }
        }
        table.insert(xml, elem)
      end
    end
  end
  self.UI.setXmlTable(xml)
end

function showHighlight(params)
  local panelId = params.playerColor .. "Panel" .. params.targetGrid.row .. params.grid.col
  local circleId = params.playerColor .. "Circle" .. params.targetGrid.row .. params.grid.col
  local arrowId = params.playerColor .. "Arrow" .. params.targetGrid.row .. params.grid.col

  local md = METADATA[params.cardId]
  local type = tostring(md.damage or 0)

  local showArrow = (md.directionMove ~= nil)

  -- update child color and visibility
  if showArrow then
    -- update arrow rotation
    local rowDiff = params.targetGrid.row - params.grid.row
    local colDiff = params.targetGrid.col - params.grid.col

    local arrowRot = 0

    if rowDiff < 0 and colDiff < 0 then
      arrowRot = 180
    elseif rowDiff < 0 and colDiff > 0 then
      arrowRot = 90
    elseif rowDiff > 0 and colDiff < 0 then
      arrowRot = 270
    elseif rowDiff > 0 and colDiff > 0 then
      arrowRot = 0
    end

    self.UI.setAttribute(arrowId, "rotation", "0 " .. arrowRot)

    -- show arrow and hide circle
    self.UI.setAttribute(arrowId, "visibility", "Black|" .. params.playerColor)
    self.UI.setAttribute(circleId, "visibility", "Black")
  else
    -- update circle color
    self.UI.setAttribute(circleId, "color", colorTable[type])

    -- show circle and hide arrow
    self.UI.setAttribute(circleId, "visibility", "Black|" .. params.playerColor)
    self.UI.setAttribute(arrowId, "visibility", "Black")
  end

  -- update parent visibility
  self.UI.setAttribute(panelId, "visibility", "Black|" .. params.playerColor)

  -- store the current type
  self.UI.setAttribute(panelId, "cardId", params.cardId)
end

-- hides all highlights for the specified playercolor
function hideAll(playerColor)
  for row = 1, 5 do
    for col = 1, 5 do
      self.UI.setAttribute(playerColor .. "Panel" .. row .. col, "visibility", "Black")
      self.UI.setAttribute(playerColor .. "Circle" .. row .. col, "visibility", "Black")
      self.UI.setAttribute(playerColor .. "Arrow" .. row .. col, "visibility", "Black")
    end
  end
end

function makeChoice(player, _, elementId)
  local len = string.len(elementId)
  local row = tonumber(string.sub(elementId, len - 1, len - 1))
  local col = tonumber(string.sub(elementId, len, len))

  -- get cardId
  local panelId = player.color .. "Panel" .. row .. col
  local cardId = self.UI.getAttribute(panelId, "cardId")

  Global.call("registerChoice", { choiceGrid = { row = row, col = col }, playerColor = player.color, cardId = cardId })
end

function oppositeColor(color)
  if color == "Blue" then
    return "Red"
  else
    return "Blue"
  end
end
