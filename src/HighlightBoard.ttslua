require("CardMetadata")

PLAYERMAT_BLUE_GUID = "1f4fe0"
PLAYERMAT_RED_GUID  = "9c3ece"

local colorTable    = {
  ["0"] = "Green",
  ["25"] = "Pink",
  ["50"] = "Orange",
  ["75"] = "Red"
}

function onLoad()
  createXML()

  PLAYERMAT_BLUE = getObjectFromGUID(PLAYERMAT_BLUE_GUID)
  PLAYERMAT_RED  = getObjectFromGUID(PLAYERMAT_RED_GUID)
end

function createXML()
  local xml = {}

  for _, color in ipairs({ "Blue", "Red" }) do
    for row = 1, 5 do
      for col = 1, 5 do
        local xPos = -82 + (col - 1) * 41
        local yPos = -82 + (row - 1) * 41
        local zPos = -75
        local elem = {
          tag = "Panel",
          attributes = {
            id         = color .. "Panel" .. row .. col,
            width      = 25,
            height     = 25,
            position   = xPos .. " " .. yPos .. " " .. zPos,
            visibility = "Black"
          },
          children = {
            tag = "Mask",
            attributes = {
              image = "https://github.com/Chr1Z93/Heroic-Heist-TTS/blob/main/assets/highlight_circle.png?raw=true"
            },
            children = {
              tag = "Panel",
              attributes = {
                id = color .. "Circle" .. row .. col,
                onClick = "resolveCard",
                color = "White"
              }
            }
          }
        }
        table.insert(xml, elem)
      end
    end
  end

  self.UI.setXmlTable(xml)
end

function showHighlight(params)
  local panelId = params.playerColor .. "Panel" .. params.grid.row .. params.grid.col
  local circleId = params.playerColor .. "Circle" .. params.grid.row .. params.grid.col

  local md = METADATA[params.cardId]
  local type = tostring(md.damage or 0)

  -- update color
  self.UI.setAttribute(circleId, "color", colorTable[type])

  -- update visibility
  self.UI.setAttribute(panelId, "visibility", "Black|" .. params.playerColor)

  -- store the current type
  self.UI.setAttribute(panelId, "cardId", params.cardId)
end

-- hides all highlights for the specified playercolor
function hideAll(playerColor)
  for row = 1, 5 do
    for col = 1, 5 do
      self.UI.setAttribute(playerColor .. "Panel" .. row .. col, "visibility", "Black")
    end
  end
end

function resolveCard(player, clickType, elementId)
  local len = string.len(elementId)
  local row = tonumber(string.sub(elementId, len - 1, len - 1))
  local col = tonumber(string.sub(elementId, len, len))

  -- get cardId
  local panelId = player.color .. "Panel" .. row .. col
  local cardId = self.UI.getAttribute(panelId, "cardId")

  -- get metadata
  local md = METADATA[cardId]
  local type = md.damage or 0

  -- deal damage to enemy or move
  if type > 0 then
    local enemyColor = oppositeColor(player.color)
    local grid = Global.call("getPlayerTokenGridPos", enemyColor)
    if not grid then return end

    if grid.row == row and grid.col == col then
      local GP = getObjectFromGUID("2f5ddb")
      GP.call("dealDamageToColor", { color = enemyColor, damage = type })
    else
      broadcastToAll("Missed target", "White")
    end
  else
    local mParams = {
      color = player.color,
      grid = { row = row, col = col }
    }
    Global.call("setPlayerTokenGridPos", mParams)
  end

  hideAll(player.color)

  -- discard active card
  _G["PLAYERMAT_" .. string.upper(player.color)].call("discardActiveCard")
end

function oppositeColor(color)
  if color == "Blue" then
    return "Red"
  else
    return "Blue"
  end
end
