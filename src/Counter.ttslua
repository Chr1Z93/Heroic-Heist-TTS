local MIN_VALUE, MAX_VALUE = 0, 100
val = 0

-- health bar data
local healthWidth = 250
local healthHeight = 38
local healthPos = Vector(0, -130, 70)
local healthRot = Vector(0, 0, 0)
local healthScale = Vector(1.3, 1.3, 1.3)

function onSave() return JSON.encode(val) end

function onLoad(savedData)
  if savedData ~= "" and savedData ~= nil then
    val = JSON.decode(savedData)
  end

  -- smaller fontSize for health trackers
  local fontColor = { 1, 1, 1 }
  local fontSize = 800
  local name = self.getName()
  if name == "HealthTrackerBlue" or name == "HealthTrackerRed" then
    fontSize = 500
    if name == "HealthTrackerRed" then
      healthPos:scale(Vector(-1, 1, 1))
      healthRot:scale(Vector(1, 1, -1))
    end
    createHealthBarXml()
  end

  self.createButton({
    label = tostring(val),
    click_function = "none",
    function_owner = self,
    position = { 0, 0.5, 0.05 },
    scale = { 0.5, 0.5, 0.5 },
    height = 0,
    width = 0,
    font_size = fontSize,
    font_color = fontColor
  })
  self.addContextMenuItem("Edit Value", function(playerColor)
    Player[playerColor].showInputDialog("Enter new value:", tostring(val), function(text)
      broadcastToAll(getColoredName(playerColor) .. " edited '" .. self.getName() .. "' from '" .. val .. "' to '" .. text .. "'.")
      updateVal(text)
    end)
  end)
end

function updateVal(newVal)
  if tonumber(newVal) then
    val = math.min(math.max(newVal, MIN_VALUE), MAX_VALUE)
    self.editButton({ index = 0, label = tostring(val) })
    maybeUpdateHealthBar()
  end
end

function addOrSubtract(amount)
  val = math.min(math.max(val + amount, MIN_VALUE), MAX_VALUE)
  self.editButton({ index = 0, label = tostring(val) })
  maybeUpdateHealthBar()
  return val
end

function none() end

function getColoredName(playerColor)
  local displayName = playerColor
  if Player[playerColor].steam_name then
    displayName = Player[playerColor].steam_name
  end

  -- add bb-code
  return "[" .. Color.fromString(playerColor):toHex() .. "]" .. displayName .. "[-]"
end

function maybeUpdateHealthBar()
  local name = self.getName()
  if name == "HealthTrackerBlue" or name == "HealthTrackerRed" then
    updateHealthBar()
  end
end

function updateHealthBar()
  local width, position = getHealthBarData()
  self.UI.setAttribute("healthFill", "width", width)
  self.UI.setAttribute("healthFill", "position", position)
end

function getHealthBarData()
  local width = val * healthWidth / 100
  local offset = (healthWidth - width) / 2 * healthScale.x
  if self.getName() == "HealthTrackerRed" then
    offset = -offset
  end
  local position = (healthPos.x - offset) .. " " .. healthPos.y .. " " .. healthPos.z
  return width, position
end

function createHealthBarXml()
  local width, position = getHealthBarData()
  local uiTable = {
    {
      tag = "Image",
      attributes = {
        scale = healthScale.x .. " " .. healthScale.y .. " " .. healthScale.z,
        image = "HealthBar",
        width = healthWidth + 50,
        height = healthHeight + 37,
        position = healthPos.x .. " " .. healthPos.y .. " " .. healthPos.z,
        rotation = healthRot.x .. " " .. healthRot.y .. " " .. healthRot.z
      }
    },
    {
      tag = "Panel",
      attributes = {
        id = "healthFill",
        scale = healthScale.x .. " " .. healthScale.y .. " " .. healthScale.z,
        color = "#FF000077",
        width = width,
        height = healthHeight,
        position = position,
        rotation = healthRot.x .. " " .. healthRot.y .. " " .. healthRot.z
      }
    }
  }

  self.UI.setXmlTable(uiTable)
end
