local searchLib           = require("SearchLib")

PLAYERMAT_BLUE_GUID       = "1f4fe0"
PLAYERMAT_RED_GUID        = "9c3ece"

DECKMAT_BLUE_GUID         = "ea89a6"
DECKMAT_RED_GUID          = "42d92c"

HEALTH_TRACKER_BLUE_GUID  = "29b826"
HEALTH_TRACKER_RED_GUID   = "5a08bb"

ROUND_TRACKER_GUID        = "bbd4df"
TURN_TRACKER_GUID         = "6707f1"

SCORE_TRACKER_BLUE_GUID   = "aba675"
SCORE_TRACKER_RED_GUID    = "bf8e2e"

SOURCE_PLAYER_BLUE_GUID   = "fc5ff4"
SOURCE_PLAYER_RED_GUID    = "81eaa5"

SOURCE_RELIC_GUID         = "1e886d"
SOURCE_ATTACK_DECK_GUID   = "893ba7"
SOURCE_MOVEMENT_DECK_GUID = "f8b297"
PLAYAREA_GUID             = "5ef1de"

function onLoad()
  getReferences()
  math.randomseed(os.time())

  -- shared parameters
  local buttonParameters = {
    function_owner = self,
    position = { x = 0, y = 0.2, z = 0 },
    height = 1350,
    width = 6000,
    scale = { 0.1, 0.1, 0.1 },
    font_size = 1000,
    font_color = { 0, 0, 0 }
  }

  -- new game button
  buttonParameters.label = "New Game"
  buttonParameters.click_function = "newGame"
  buttonParameters.position.z = -0.6
  buttonParameters.tooltip = "Click to start a new game"
  self.createButton(buttonParameters)

  -- next round button
  buttonParameters.label = "Next Round"
  buttonParameters.click_function = "nextRound"
  buttonParameters.tooltip = "Click to proceed to the next round"
  buttonParameters.position.z = 0
  self.createButton(buttonParameters)

  -- next turn button
  buttonParameters.label = "Next Turn"
  buttonParameters.click_function = "nextTurn"
  buttonParameters.tooltip = "Click to proceed to the next turn"
  buttonParameters.position.z = 0.6
  self.createButton(buttonParameters)
end

function getReferences()
  PLAYERMAT_BLUE       = getObjectFromGUID(PLAYERMAT_BLUE_GUID)
  PLAYERMAT_RED        = getObjectFromGUID(PLAYERMAT_RED_GUID)

  DECKMAT_BLUE         = getObjectFromGUID(DECKMAT_BLUE_GUID)
  DECKMAT_RED          = getObjectFromGUID(DECKMAT_RED_GUID)

  HEALTH_TRACKER_BLUE  = getObjectFromGUID(HEALTH_TRACKER_BLUE_GUID)
  HEALTH_TRACKER_RED   = getObjectFromGUID(HEALTH_TRACKER_RED_GUID)

  ROUND_TRACKER        = getObjectFromGUID(ROUND_TRACKER_GUID)
  TURN_TRACKER         = getObjectFromGUID(TURN_TRACKER_GUID)

  SCORE_TRACKER_BLUE   = getObjectFromGUID(SCORE_TRACKER_BLUE_GUID)
  SCORE_TRACKER_RED    = getObjectFromGUID(SCORE_TRACKER_RED_GUID)

  SOURCE_PLAYER_BLUE   = getObjectFromGUID(SOURCE_PLAYER_BLUE_GUID)
  SOURCE_PLAYER_RED    = getObjectFromGUID(SOURCE_PLAYER_RED_GUID)

  SOURCE_RELIC         = getObjectFromGUID(SOURCE_RELIC_GUID)
  SOURCE_ATTACK_DECK   = getObjectFromGUID(SOURCE_ATTACK_DECK_GUID)
  SOURCE_MOVEMENT_DECK = getObjectFromGUID(SOURCE_MOVEMENT_DECK_GUID)
  PLAYAREA             = getObjectFromGUID(PLAYAREA_GUID)
end

function newGame()
  broadcastToAll("New Game!", "Green")

  -- newRound
  nextRound(_, _, _, true)

  -- set round to 1
  ROUND_TRACKER.call("updateVal", 1)
end

function nextRound(_, _, _, noprint)
  if not noprint then
    local round = ROUND_TRACKER.getVar("val") + 1
    broadcastToAll("Round " .. round, "Orange")
  end

  -- reset board
  for _, obj in ipairs(searchLib.onObject(PLAYAREA, "isUnlocked")) do
    obj.destruct()
  end

  -- reset playerboards
  for _, obj in ipairs(searchLib.onObject(PLAYERMAT_BLUE, "isUnlocked")) do
    obj.destruct()
  end

  for _, obj in ipairs(searchLib.onObject(PLAYERMAT_RED, "isUnlocked")) do
    obj.destruct()
  end

  -- reset player hands
  for _, obj in ipairs(Player["Blue"].getHandObjects()) do
    obj.destruct()
  end

  for _, obj in ipairs(Player["Red"].getHandObjects()) do
    obj.destruct()
  end

  -- reset deckmats
  DECKMAT_BLUE.call("reset")
  DECKMAT_RED.call("reset")

  -- get new speed value for deckmats
  DECKMAT_BLUE.call("setNewSpeed", math.random(1, 100))
  DECKMAT_RED.call("setNewSpeed", math.random(1, 100))

  -- reset turn tracker
  TURN_TRACKER.call("updateVal", 1)

  -- add 1 to round tracker
  ROUND_TRACKER.call("addOrSubtract", 1)

  -- reset health trackers
  HEALTH_TRACKER_RED.call("updateVal", 100)
  HEALTH_TRACKER_BLUE.call("updateVal", 100)

  -- spawn relic
  local xPositions = { -9.53, -4.74, 0, 4.74, 9.53 }
  local yRotations = { 0, 90, 180, 270 }

  SOURCE_RELIC.takeObject({
    position = { x = xPositions[math.random(5)], y = 2.9, z = 0.7 },
    rotation = { x = 0, y = yRotations[math.random(4)], z = 0 }
  })

  -- spawn player tokens
  SOURCE_PLAYER_BLUE.takeObject({
    position = { x = 0.05, y = 2.9, z = -8.88 },
    rotation = { x = 0, y = 180, z = 0 }
  })

  SOURCE_PLAYER_RED.takeObject({
    position = { x = 0.05, y = 2.9, z = 10.29 },
    rotation = { x = 0, y = 0, z = 0 }
  })

  -- give players copies of cards to assemble their deck
  for _, color in ipairs({ "BLUE", "RED" }) do
    local direction = { BLUE = -1, RED = 1 }
    local mat = _G["PLAYERMAT_" .. color]
    local pos1 = Vector(direction[color] * 2.5, 0.2, 0)
    local pos2 = Vector(direction[color] * 3.5, 0.2, 0)
    local rot = mat.getRotation()
    SOURCE_MOVEMENT_DECK.takeObject({ position = mat.positionToWorld(pos1), rotation = rot })
    SOURCE_ATTACK_DECK.takeObject({ position = mat.positionToWorld(pos2), rotation = rot })
  end
  
  broadcastToAll("Assemble your deck from the provided piles (4 from each).", "White")
end

function nextTurn()
  local turn = TURN_TRACKER.getVar("val") + 1
  broadcastToAll("Turn " .. turn, "Yellow")

  -- add 1 to turn tracker
  TURN_TRACKER.call("addOrSubtract", 1)
end
