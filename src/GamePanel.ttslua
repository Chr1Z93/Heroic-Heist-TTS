HEALTH_TRACKER_BLUE_GUID  = "29b826"
HEALTH_TRACKER_RED_GUID   = "5a08bb"
ROUND_TRACKER_GUID        = "bbd4df"
TURN_TRACKER_GUID         = "6707f1"
SCORE_TRACKER_BLUE_GUID   = "aba675"
SCORE_TRACKER_RED_GUID    = "bf8e2e"
SOURCE_PLAYER_RED_GUID    = "81eaa5"
SOURCE_PLAYER_BLUE_GUID   = "fc5ff4"
SOURCE_RELIC_GUID         = "1e886d"
SOURCE_ATTACK_DECK_GUID   = "893ba7"
SOURCE_MOVEMENT_DECK_GUID = "f8b297"
PLAYAREA_GUID             = "5ef1de"

function onLoad()
  getReferences()
  math.randomseed(os.time())

  -- shared parameters
  local buttonParameters = {
    function_owner = self,
    position = { x = 0, y = 0.2, z = 0.5 },
    height = 1350,
    width = 6000,
    scale = { 0.1, 0.1, 0.1 },
    font_size = 1000,
    font_color = { 0, 0, 0 }
  }

  -- new game button
  buttonParameters.label = "New Game"
  buttonParameters.click_function = "newGame"
  buttonParameters.position.z = -0.6
  buttonParameters.tooltip = "Click to start a new game"
  self.createButton(buttonParameters)

  -- next round button
  buttonParameters.label = "Next Round"
  buttonParameters.click_function = "nextRound"
  buttonParameters.tooltip = "Click to proceed to the next round"
  buttonParameters.position.z = 0
  self.createButton(buttonParameters)

  -- next turn button
  buttonParameters.label = "Next Turn"
  buttonParameters.click_function = "nextTurn"
  buttonParameters.tooltip = "Click to proceed to the next turn"
  buttonParameters.position.z = 0.6
  self.createButton(buttonParameters)
end

function getReferences()
  HEALTH_TRACKER_BLUE  = getObjectFromGUID(HEALTH_TRACKER_BLUE_GUID)
  HEALTH_TRACKER_RED   = getObjectFromGUID(HEALTH_TRACKER_RED_GUID)
  ROUND_TRACKER        = getObjectFromGUID(ROUND_TRACKER_GUID)
  TURN_TRACKER         = getObjectFromGUID(TURN_TRACKER_GUID)
  SCORE_TRACKER_BLUE   = getObjectFromGUID(SCORE_TRACKER_BLUE_GUID)
  SCORE_TRACKER_RED    = getObjectFromGUID(SCORE_TRACKER_RED_GUID)
  SOURCE_PLAYER_RED    = getObjectFromGUID(SOURCE_PLAYER_RED_GUID)
  SOURCE_PLAYER_BLUE   = getObjectFromGUID(SOURCE_PLAYER_BLUE_GUID)
  SOURCE_RELIC         = getObjectFromGUID(SOURCE_RELIC_GUID)
  SOURCE_ATTACK_DECK   = getObjectFromGUID(SOURCE_ATTACK_DECK_GUID)
  SOURCE_MOVEMENT_DECK = getObjectFromGUID(SOURCE_MOVEMENT_DECK_GUID)
  PLAYAREA             = getObjectFromGUID(PLAYAREA_GUID)
end

function newGame()
  broadcastToAll("New Game!", "Green")

  -- newRound
  nextRound(_, _, _, true)

  -- set round to 1
  ROUND_TRACKER.call("updateVal", 1)
end

function nextRound(_, _, _, noprint)
  if not noprint then
    local round = ROUND_TRACKER.getVar("val") + 1
    broadcastToAll("Round " .. round, "Orange")
  end

  -- reset board
  for _, obj in ipairs(searchBoard()) do
    obj.destruct()
  end

  -- reset turn tracker
  TURN_TRACKER.call("updateVal", 1)

  -- add 1 to round tracker
  ROUND_TRACKER.call("addOrSubtract", 1)

  -- reset health trackers
  HEALTH_TRACKER_RED.call("updateVal", 100)
  HEALTH_TRACKER_BLUE.call("updateVal", 100)

  -- spawn relic
  local xPositions = { -11.87, -5.93, 0, 5.93, 11.87 }
  local yRotations = { 0, 90, 180, 270 }

  SOURCE_RELIC.takeObject({
    position = { x = xPositions[math.random(5)], y = 2.9, z = 0 },
    rotation = { x = 0, y = yRotations[math.random(4)], z = 0 }
  })

  -- spawn player tokens
  SOURCE_PLAYER_BLUE.takeObject({
    position = { x = 0, y = 2.9, z = -11.85 },
    rotation = { x = 0, y = 180, z = 0 }
  })

  SOURCE_PLAYER_RED.takeObject({
    position = { x = 0, y = 2.9, z = 11.85 },
    rotation = { x = 0, y = 0, z = 0 }
  })
end

function nextTurn()
  local turn = TURN_TRACKER.getVar("val") + 1
  broadcastToAll("Turn " .. turn, "Yellow")

  -- add 1 to turn tracker
  TURN_TRACKER.call("addOrSubtract", 1)
end

function searchBoard()
  local searchResult = Physics.cast({
    origin       = PLAYAREA.getPosition(),
    direction    = { 0, 1, 0 },
    orientation  = { 0, 0, 0 },
    type         = 3,
    size         = PLAYAREA.getBounds().size:setAt("y", 2),
    max_distance = 0
  })

  -- filtering the result
  local objList = {}
  for _, v in ipairs(searchResult) do
    if not v.hit_object.getLock() then
      table.insert(objList, v.hit_object)
    end
  end
  return objList
end
