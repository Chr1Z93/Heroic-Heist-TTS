require("CardMetadata")
require("libraries/GuidReferences")

NOT_INTERACTABLE = {
  "PlayArea",
  "PlayAreaBlue",
  "PlayAreaRed",
  "HighlightBoardBlue",
  "HighlightBoardRed"
}

choices = {}

function onLoad()
  for _, name in ipairs(NOT_INTERACTABLE) do
    local obj = getObjectFromName(name)
    obj.interactable = false
  end
  deckmatBlue = getObjectFromName("DeckmatBlue")
  deckmatRed = getObjectFromName("DeckmatRed")
  gamePanel = getObjectFromName("GamePanel")
  highlightBoardBlue = getObjectFromName("HighlightBoardBlue")
  highlightBoardRed = getObjectFromName("HighlightBoardRed")
  playArea = getObjectFromName("PlayArea")
  playAreaBlue = getObjectFromName("PlayAreaBlue")
  playAreaRed = getObjectFromName("PlayAreaRed")
  playermatBlue = getObjectFromName("PlayermatBlue")
  playermatRed = getObjectFromName("PlayermatRed")
  roundTracker = getObjectFromName("RoundTracker")
end

-- don't allow rotating cards in hands
function onPlayerAction(player, action, targets)
  if action == Player.Action.RotateIncrementalLeft or action == Player.Action.RotateIncrementalRight then
    for _, obj in ipairs(targets) do
      if obj.type == "Card" or obj.type == "Deck" then
        broadcastToColor("Rotating cards is disabled to avoid confusing cards.", player.color, "White")
        return false
      end
    end
  end
  return true
end

-- grid goes from bottom left to top right (from 1/1 to 5/5)
-- x from roughly local -0.6 to +0.6
-- z from roughly local -0.6 to +0.6
function convertPosToGrid(pos)
  local lPos = playArea.positionToLocal(pos)
  local col = math.floor(lPos.x / 0.3 + 0.5) + 3
  local row = math.floor(lPos.z / 0.3 + 0.5) + 3
  return { row = row, col = col }
end

-- find close snap point position
function convertGridToPos(grid)
  local pos = { x = (grid.col - 3) * 0.3, z = (grid.row - 3) * 0.3 }
  for _, snap in ipairs(playArea.getSnapPoints()) do
    if math.abs(snap.position.x - pos.x) < 0.1 and math.abs(snap.position.z - pos.z) < 0.1 then
      return playArea.positionToWorld(Vector(snap.position.x, 0.2, snap.position.z))
    end
  end
end

-- get current position of player token
function getPlayerTokenGridPos(color)
  for _, obj in ipairs(getObjects()) do
    if obj.getName() == "Player" .. color then
      return convertPosToGrid(obj.getPosition())
    end
  end

  broadcastToAll("Couldn't find " .. color .. " player token.", "Orange")
end

function setPlayerTokenGridPos(params)
  for _, obj in ipairs(getObjects()) do
    if obj.getName() == "Player" .. params.color then
      obj.setPosition(convertGridToPos(params.grid))
      return
    end
  end

  broadcastToAll("Couldn't find " .. params.color .. " player token.", "Orange")
end

function getRelicTokenGridPos()
  for _, obj in ipairs(getObjects()) do
    if obj.getName() == "Relic" then
      return convertPosToGrid(obj.getPosition())
    end
  end

  broadcastToAll("Couldn't find relic token.", "Orange")
end

function takeControlOfRelic(newOwner, move)
  for _, obj in ipairs(getObjects()) do
    if obj.getName() == "Relic" then
      local currentGrid = convertPosToGrid(obj.getPosition())

      local currentOwner = nil
      if currentGrid.row == 0 then
        currentOwner = "Blue"
      elseif currentGrid.row == 6 then
        currentOwner = "Red"
      elseif not move then
        -- if uncontrolled and this is not a move
        return
      end

      if currentOwner ~= newOwner then
        local newPos = { 0, 2.8, -15.13 }
        local newRot = { 0, 180, 0 }
        if newOwner == "Red" then
          newPos = { 0, 2.8, 14.45 }
          newRot = { 0, 0, 0 }
        end
        obj.setPosition(newPos)
        obj.setRotation(newRot)
        broadcastToAll(newOwner .. " took control of the relic.", "White")
      end
      return
    end
  end
end

function getTargetsForCardId(params)
  local playerColor = params.playerColor
  local cardId = params.cardId
  local md = METADATA[cardId]

  -- get current position of player token
  local grid = getPlayerTokenGridPos(playerColor)

  -- get target locations
  local direction = { Blue = 1, Red = -1 }
  local mult = direction[playerColor]
  local targetGridList = {}

  -- add single spots for areas (these are connected)
  for _, data in ipairs(md.targetAreas or {}) do
    -- increase by 5 to avoid negative numbers
    local start1 = data.c1[1] + 5
    local end1 = data.c2[1] + 5
    local start2 = data.c1[2] + 5
    local end2 = data.c2[2] + 5
    local step1 = (start1 >= end1) and -1 or 1
    local step2 = (start2 >= end2) and -1 or 1

    -- get rotation for connected space attacking
    local rot = 0
    if start1 == end1 then
      rot = 90
    elseif start2 == end2 then
      rot = 180
    end

    for i = start1, end1, step1 do
      for j = start2, end2, step2 do
        local newTarget = { row = grid.row + (j - 5) * mult, col = grid.col + (i - 5) * mult, connected = true, rot = rot }

        -- get potential 2nd rotation for corners
        if ((i == start1 or i == end1) and start1 ~= end1) or ((j == start2 or j == end2) and start2 ~= end2) then
          newTarget.rot2 = newTarget.rot + 90
        end

        if validateTarget(newTarget, false, playerColor) then
          table.insert(targetGridList, newTarget)
        end
      end
    end
  end

  -- add single spots
  for _, data in ipairs(md.targetSpots or {}) do
    local newTarget = { row = grid.row + data[2] * mult, col = grid.col + data[1] * mult }
    if validateTarget(newTarget, false, playerColor) then
      table.insert(targetGridList, newTarget)
    end
  end

  -- add spots for connectiongroups (these are connected)
  for _, outerData in ipairs(md.targetConnectionGroups or {}) do
    for _, data in ipairs(outerData or {}) do
      local newTarget = { row = grid.row + data.point[2] * mult, col = grid.col + data.point[1] * mult, connected = true, rot = data.rot, rot2 = data.rot2 }
      if validateTarget(newTarget, false, playerColor) then
        table.insert(targetGridList, newTarget)
      end
    end
  end

  for _, data in ipairs(md.fixedMove or {}) do
    local newTarget = { row = grid.row + data[2] * mult, col = grid.col + data[1] * mult }
    if validateTarget(newTarget, true, playerColor) then
      table.insert(targetGridList, newTarget)
    end
  end

  -- only display close locations for directions
  for _, data in ipairs(md.directionMove or {}) do
    local newTarget = { row = grid.row + data[2] * mult, col = grid.col + data[1] * mult }
    if validateTarget(newTarget, true, playerColor) then
      table.insert(targetGridList, newTarget)
    end
  end

  for _, data in ipairs(md.choice1 or {}) do
    local newGrid = { row = grid.row + data[2] * mult, col = grid.col + data[1] * mult }
    if not validateTarget(newGrid, true, playerColor) then
      break
    else
      for _, data2 in ipairs(md.choice2 or {}) do
        local newTarget = { row = newGrid.row + data2[2] * mult, col = newGrid.col + data2[1] * mult }
        if validateTarget(newTarget, true, playerColor) then
          table.insert(targetGridList, newTarget)
        end
      end
    end
  end

  return targetGridList
end

function validateTarget(targetGrid, isMove, playerColor)
  if targetGrid.row > 0 and targetGrid.row < 6 and targetGrid.col > 0 and targetGrid.col < 6 then
    if not isMove then
      return true
    else
      -- get enemy position and check if he blocks
      local enemyColor = oppositeColor(playerColor)
      local grid = getPlayerTokenGridPos(enemyColor)
      if not grid then
        return false
      end

      if targetGrid.row == grid.row and targetGrid.col == grid.col then
        return false
      else
        return true
      end
    end
  else
    return false
  end
end

function getConnectedTargets(cardId, playerColor, startGrid)
  local connectedTargets = {}
  local md = METADATA[cardId]
  local addedStartGrid = false

  -- get current position of player token
  local grid = getPlayerTokenGridPos(playerColor)

  -- get target locations
  local direction = { Blue = 1, Red = -1 }
  local mult = direction[playerColor]

  -- go through targetAreas
  for _, data in ipairs(md.targetAreas or {}) do
    local match = false
    local tempList = {}

    -- increase by 5 to avoid negative numbers
    local start1 = data.c1[1] + 5
    local end1 = data.c2[1] + 5
    local start2 = data.c1[2] + 5
    local end2 = data.c2[2] + 5
    local step1 = (start1 >= end1) and -1 or 1
    local step2 = (start2 >= end2) and -1 or 1

    for i = start1, end1, step1 do
      for j = start2, end2, step2 do
        local newTarget = { row = grid.row + (j - 5) * mult, col = grid.col + (i - 5) * mult }
        table.insert(tempList, newTarget)

        -- check if this is startGrid
        if newTarget.row == startGrid.row and newTarget.col == startGrid.col then
          match = true
        end
      end
    end

    -- if startGrid was contained in this set, add them all to the table
    if match then
      addedStartGrid = true
      for _, target in ipairs(tempList) do
        table.insert(connectedTargets, target)
      end
    end
  end

  -- go through connection groups
  for _, outerData in ipairs(md.targetConnectionGroups or {}) do
    local match = false
    local tempList = {}

    for _, data in ipairs(outerData or {}) do
      local newTarget = { row = grid.row + data.point[2] * mult, col = grid.col + data.point[1] * mult }
      table.insert(tempList, newTarget)

      -- check if this is startGrid
      if newTarget.row == startGrid.row and newTarget.col == startGrid.col then
        match = true
      end
    end

    -- if startGrid was contained in this set, add them all to the table
    if match then
      addedStartGrid = true
      for _, target in ipairs(tempList) do
        table.insert(connectedTargets, target)
      end
    end
  end

  -- if startGrid is not added to the list yet, add it now
  if not addedStartGrid then
    table.insert(connectedTargets, startGrid)
  end

  return connectedTargets
end

-- display a button for each target location
function displayTargetSelection(params)
  local playerColor = params.playerColor
  local cardId = params.cardId
  local targetGridList = getTargetsForCardId(params)

  _G["highlightBoard" .. playerColor].call("hideAll", playerColor)

  if #targetGridList == 0 then
    broadcastToColor("No valid target locations detected.", playerColor, "Orange")
  else
    for _, targetGrid in ipairs(targetGridList) do
      local hParams = {
        playerColor = playerColor,
        targetGrid = targetGrid,
        cardId = cardId,
        grid = getPlayerTokenGridPos(playerColor)
      }
      _G["highlightBoard" .. playerColor].call("showHighlight", hParams)
    end
  end
end

function oppositeColor(color)
  if color == "Blue" then
    return "Red"
  else
    return "Blue"
  end
end

function registerChoice(params)
  local playerColor = params.playerColor
  printToAll(playerColor .. " made a choice.", "White")

  -- store choice
  choices[playerColor] = params
  _G["highlightBoard" .. playerColor].call("hideAll", playerColor)

  -- hide "Play a Card" button
  _G["playermat" .. playerColor].call("togglePlayButton")

  -- if both players made a choice, resolve them
  if choices.Blue ~= nil and choices.Red ~= nil then
    resolveBothCards()
  end
end

function resolveBothCards()
  -- get speed of players
  local speedBlue = deckmatBlue.call("getSpeed")
  local speedRed = deckmatRed.call("getSpeed")

  -- get round number
  local round = roundTracker.getVar("val")
  local modifier = 0

  if round % 2 == 0 then
    -- even round: slower speed goes first
    modifier = -100
  else
    -- odd round: faster speed goes first
    modifier = 100
  end

  -- modify speed for movement before attack
  if isAttack(choices.Blue.cardId) then
    speedBlue = speedBlue + modifier
  end

  if isAttack(choices.Red.cardId) then
    speedRed = speedRed + modifier
  end

  if speedBlue > speedRed then
    resolveCard(choices.Red)
    resolveCard(choices.Blue)
  else
    resolveCard(choices.Blue)
    resolveCard(choices.Red)
  end

  -- reset "choices" table
  choices = {}
end

function isAttack(cardId)
  return (METADATA[cardId].damage or 0) > 0
end

function resolveCard(params)
  local playerColor = params.playerColor
  local choiceGrid = params.choiceGrid

  -- get metadata
  local md = METADATA[params.cardId]
  local type = md.damage or 0

  -- get current position
  local grid = getPlayerTokenGridPos(playerColor)

  -- get enemy position
  local enemyColor = oppositeColor(playerColor)
  local eGrid = getPlayerTokenGridPos(enemyColor)

  -- early exit if token missing
  if not eGrid or not grid then
    broadcastToAll("Couldn't find both player tokens on the board.", "Red")
    return
  end

  -- deal damage to enemy
  if type > 0 then
    local hitSomething = false

    -- display explosion
    local src = getObjectFromName("SourceExplosion")
    local explosionData = src.getData().ContainedObjects[1]
    local explosion = spawnObjectData({ data = explosionData, position = convertGridToPos(choiceGrid)})
    explosion.AssetBundle.playLoopingEffect(2)
    Wait.time(function() explosion.destruct() end, 2)

    -- check connected spaces
    local connectedTargets = getConnectedTargets(params.cardId, playerColor, choiceGrid)
    for _, target in ipairs(connectedTargets) do
      if eGrid.row == target.row and eGrid.col == target.col then
        gamePanel.call("dealDamageToColor", { color = enemyColor, damage = type })
        takeControlOfRelic(playerColor, false)
        hitSomething = true
        break
      end
    end

    -- attack missed
    if not hitSomething then
      broadcastToAll(playerColor .. "'s attack missed.", "White")
    end
  -- move action
  else
    if eGrid.row == choiceGrid.row and eGrid.col == choiceGrid.col then
      broadcastToAll(playerColor .. "'s movement was blocked.", "White")
    else
      local mParams = {
        color = playerColor,
        grid = { row = choiceGrid.row, col = choiceGrid.col }
      }
      setPlayerTokenGridPos(mParams)

      -- maybe take control of relic
      local relicGrid = getRelicTokenGridPos()
      if (choiceGrid.row == relicGrid.row and choiceGrid.col == relicGrid.col) then
        takeControlOfRelic(playerColor, true)
      end

      -- get next location for direction move
      if md.directionMove then
        -- get target location
        local newTarget = { row = 2 * choiceGrid.row - grid.row, col = 2 * choiceGrid.col - grid.col }

        -- if valid, repeat movement
        if validateTarget(newTarget, true, playerColor) then
          params.choiceGrid = newTarget
          resolveCard(params)
        end
      end
    end
  end

  -- discard active card
  _G["playermat" .. playerColor].call("discardActiveCard")
end
