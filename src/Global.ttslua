require("CardMetadata")
require("libraries/GuidReferences")

NOT_INTERACTABLE = {
  "PlayArea",
  "HighlightBoard"
}

choices = {}

function onLoad()
  for _, name in ipairs(NOT_INTERACTABLE) do
    local obj = getObjectFromName(name)
    obj.interactable = false
  end
  deckmatBlue = getObjectFromName("DeckmatBlue")
  deckmatRed = getObjectFromName("DeckmatRed")
  gamePanel = getObjectFromName("GamePanel")
  highlightBoard = getObjectFromName("HighlightBoard")
  playArea = getObjectFromName("PlayArea")
  playermatBlue = getObjectFromName("PlayermatBlue")
  playermatRed = getObjectFromName("PlayermatRed")
end

-- grid goes from bottom left to top right (from 1/1 to 5/5)
-- x from roughly local -0.6 to +0.6
-- z from roughly local -0.6 to +0.6
function convertPosToGrid(pos)
  local lPos = playArea.positionToLocal(pos)
  local col = math.floor(lPos.x / 0.3 + 0.5) + 3
  local row = math.floor(lPos.z / 0.3 + 0.5) + 3
  return { row = row, col = col }
end

-- find close snap point position
function convertGridToPos(grid)
  local pos = { x = (grid.col - 3) * 0.3, z = (grid.row - 3) * 0.3 }
  for _, snap in ipairs(playArea.getSnapPoints()) do
    if math.abs(snap.position.x - pos.x) < 0.1 and math.abs(snap.position.z - pos.z) < 0.1 then
      return playArea.positionToWorld(Vector(snap.position.x, 0.2, snap.position.z))
    end
  end
end

-- get current position of player token
function getPlayerTokenGridPos(color)
  for _, obj in ipairs(getObjects()) do
    if obj.getName() == "Player" .. color then
      return convertPosToGrid(obj.getPosition())
    end
  end

  broadcastToAll("Couldn't find " .. color .. " player token.", "Orange")
end

function setPlayerTokenGridPos(params)
  for _, obj in ipairs(getObjects()) do
    if obj.getName() == "Player" .. params.color then
      obj.setPosition(convertGridToPos(params.grid))
      return
    end
  end

  broadcastToAll("Couldn't find " .. params.color .. " player token.", "Orange")
end

function getRelicTokenGridPos()
  for _, obj in ipairs(getObjects()) do
    if obj.getName() == "Relic" then
      return convertPosToGrid(obj.getPosition())
    end
  end

  broadcastToAll("Couldn't find relic token.", "Orange")
end

function maybeTakeControlOfRelic(newOwner)
  for _, obj in ipairs(getObjects()) do
    if obj.getName() == "Relic" then
      local currentOwner
      local currentGrid = convertPosToGrid(obj.getPosition())
      if currentGrid.row == 0 then
        currentOwner = "Blue"
      elseif currentGrid.row == 6 then
        currentOwner = "Red"
      end

      if currentOwner ~= newOwner then
        local newPos = { 0, 2.8, -15.13 }
        local newRot = { 0, 180, 0 }
        if newOwner == "Red" then
          newPos = { 0, 2.8, 14.45 }
          newRot = { 0, 0, 0 }
        end
        obj.setPosition(newPos)
        obj.setRotation(newRot)
        broadcastToAll(newOwner .. " took control of the relic.", "White")
      end
      return
    end
  end
end

function getTargetsForCardId(params)
  local playerColor = params.playerColor
  local cardId = params.cardId
  local md = METADATA[cardId]

  -- get current position of player token
  local grid = getPlayerTokenGridPos(playerColor)

  -- get target locations
  local direction = { Blue = 1, Red = -1 }
  local mult = direction[playerColor]
  local targetGridList = {}

  for _, data in ipairs(md.targetAreas or {}) do
    -- increase by 5 to avoid negative numbers
    local start1 = data.c1[1] + 5
    local end1 = data.c2[1] + 5
    local start2 = data.c1[2] + 5
    local end2 = data.c2[2] + 5
    local step1 = (start1 >= end1) and -1 or 1
    local step2 = (start2 >= end2) and -1 or 1
    for i = start1, end1, step1 do
      for j = start2, end2, step2 do
        local newTarget = { row = grid.row + (j - 5) * mult, col = grid.col + (i - 5) * mult, connected = true }
        if validateTarget(newTarget, false, playerColor) then
          table.insert(targetGridList, newTarget)
        end
      end
    end
  end

  for _, data in ipairs(md.targetSpots or {}) do
    local newTarget = { row = grid.row + data[2] * mult, col = grid.col + data[1] * mult }
    if validateTarget(newTarget, false, playerColor) then
      table.insert(targetGridList, newTarget)
    end
  end

  for _, outerData in ipairs(md.targetConnectionGroups or {}) do
    for _, data in ipairs(outerData or {}) do
      local newTarget = { row = grid.row + data[2] * mult, col = grid.col + data[1] * mult, connected = true }
      if validateTarget(newTarget, false, playerColor) then
        table.insert(targetGridList, newTarget)
      end
    end
  end

  for _, data in ipairs(md.fixedMove or {}) do
    local newTarget = { row = grid.row + data[2] * mult, col = grid.col + data[1] * mult }
    if validateTarget(newTarget, true, playerColor) then
      table.insert(targetGridList, newTarget)
    end
  end

  -- only display close locations for directions
  for _, data in ipairs(md.directionMove or {}) do
    local newTarget = { row = grid.row + data[2] * mult, col = grid.col + data[1] * mult }
    if validateTarget(newTarget, true, playerColor) then
      table.insert(targetGridList, newTarget)
    end
  end

  for _, data in ipairs(md.choice1 or {}) do
    local newGrid = { row = grid.row + data[2] * mult, col = grid.col + data[1] * mult }
    if not validateTarget(newGrid, true, playerColor) then
      break
    else
      for _, data2 in ipairs(md.choice2 or {}) do
        local newTarget = { row = newGrid.row + data2[2] * mult, col = newGrid.col + data2[1] * mult }
        if validateTarget(newTarget, true, playerColor) then
          table.insert(targetGridList, newTarget)
        end
      end
    end
  end

  return targetGridList
end

function validateTarget(targetGrid, isMove, playerColor)
  if targetGrid.row > 0 and targetGrid.row < 6 and targetGrid.col > 0 and targetGrid.col < 6 then
    if not isMove then
      return true
    else
      -- get enemy position and check if he blocks
      local enemyColor = oppositeColor(playerColor)
      local grid = getPlayerTokenGridPos(enemyColor)
      if not grid then
        return false
      end

      if targetGrid.row == grid.row and targetGrid.col == grid.col then
        return false
      else
        return true
      end
    end
  else
    return false
  end
end

-- display a button for each target location
function displayTargetSelection(params)
  local playerColor = params.playerColor
  local cardId = params.cardId
  local targetGridList = getTargetsForCardId(params)

  highlightBoard.call("hideAll", playerColor)

  if #targetGridList == 0 then
    broadcastToColor("No valid target locations detected.", playerColor, "Orange")
  else
    for _, targetGrid in ipairs(targetGridList) do
      local hParams = {
        playerColor = playerColor,
        targetGrid = targetGrid,
        cardId = cardId,
        grid = getPlayerTokenGridPos(playerColor)
      }
      highlightBoard.call("showHighlight", hParams)
    end

    -- spawn temporary hidden zone to hide pointer
    local data = getObjectFromName("HiddenZone" .. playerColor).getData()
    data.Nickname = "HidePointerZone" .. playerColor
    data.Tags = { "Temp" .. playerColor }
    spawnObjectData({
      data = data,
      position = { 0, 3, 0 },
      scale = { 25, 0.2, 25 }
    })
  end
end

function oppositeColor(color)
  if color == "Blue" then
    return "Red"
  else
    return "Blue"
  end
end

function registerChoice(params)
  local playerColor = params.playerColor
  printToAll(playerColor .. " made a choice.", "White")

  -- store choice
  choices[playerColor] = params
  highlightBoard.call("hideAll", playerColor)

  removeTempZone(playerColor)

  -- if both players made a choice, resolve them
  if choices.Blue ~= nil and choices.Red ~= nil then
    resolveBothCards()

    -- show "Play a Card" button
    local otherColor = oppositeColor(playerColor)
    _G["playermat" .. otherColor].call("togglePlayButton")
  else
    -- hide "Play a Card" button
    _G["playermat" .. playerColor].call("togglePlayButton")
  end
end

function removeTempZone(playerColor)
  for _, obj in ipairs(getObjectsWithTag("Temp" .. playerColor)) do
    obj.destruct()
  end
end

function resolveBothCards()
  -- get speed of players
  local speedBlue = deckmatBlue.call("getSpeed")
  local speedRed = deckmatRed.call("getSpeed")

  -- modify speed for movement before attack
  if isAttack(choices.Blue.cardId) then
    speedBlue = speedBlue + 100
  end

  if isAttack(choices.Red.cardId) then
    speedRed = speedRed + 100
  end

  if speedBlue > speedRed then
    resolveCard(choices.Red)
    resolveCard(choices.Blue)
  else
    resolveCard(choices.Blue)
    resolveCard(choices.Red)
  end

  -- reset "choices" table
  choices = {}
end

function isAttack(cardId)
  return (METADATA[cardId].damage or 0) > 0
end

function resolveCard(params)
  local playerColor = params.playerColor
  local cardId = params.cardId
  local choiceGrid = params.choiceGrid
  local row = choiceGrid.row
  local col = choiceGrid.col

  -- get current position
  local grid = getPlayerTokenGridPos(playerColor)

  -- get metadata
  local md = METADATA[cardId]
  local type = md.damage or 0

  -- deal damage to enemy or move
  local enemyColor = oppositeColor(playerColor)
  local eGrid = getPlayerTokenGridPos(enemyColor)
  if not eGrid then return end

  if type > 0 then
    if eGrid.row == row and eGrid.col == col then
      gamePanel.call("dealDamageToColor", { color = enemyColor, damage = type })
      maybeTakeControlOfRelic(playerColor)
    else
      broadcastToAll("Missed target", "White")
    end
  else
    if eGrid.row == row and eGrid.col == col then
      broadcastToAll(playerColor .. "'s movement was blocked.", "White")
    else
      local mParams = {
        color = playerColor,
        grid = { row = row, col = col }
      }
      setPlayerTokenGridPos(mParams)

      -- maybe take control of relic
      local relicGridPos = getRelicTokenGridPos()
      if relicGridPos.row == row and relicGridPos.col == col then
        maybeTakeControlOfRelic(playerColor)
      end

      -- get next location for direction move
      if md.directionMove then
        -- get target location
        local newTarget = { row = 2 * row - grid.row, col = 2 * col - grid.col }

        -- if valid, repeat movement
        if validateTarget(newTarget, true, playerColor) then
          params.choiceGrid = newTarget
          resolveCard(params)
        end
      end
    end
  end

  -- discard active card
  _G["playermat" .. playerColor].call("discardActiveCard")
end
