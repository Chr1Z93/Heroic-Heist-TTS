NOT_INTERACTABLE = {
  "5ef1de", -- PlayArea
  "5ef1df", -- HighlightBoard
  --"1f4fe0", -- Playmat Blue
  --"9c3ece", -- Playmat Red
  --"ea89a6", -- Deckmat Blue
  --"42d92c", -- Deckmat Red
}

function onLoad()
  for _, guid in ipairs(NOT_INTERACTABLE) do
    local obj = getObjectFromGUID(guid)
    if obj ~= nil then obj.interactable = false end
  end
  playArea = getObjectFromGUID("5ef1de")
end

-- grid goes from bottom left to top right (from 1/1 to 5/5)
-- x from roughly local -0.6 to +0.6
-- z from roughly local -0.6 to +0.6
function convertPosToGrid(pos)
  local lPos = playArea.positionToLocal(pos)
  local col = math.floor(lPos.x / 0.3 + 0.5) + 3
  local row = math.floor(lPos.z / 0.3 + 0.5) + 3
  return { row = row, col = col }
end

-- find close snap point position
function convertGridToPos(grid)
  local pos = { x = (grid.col - 3) * 0.3, z = (grid.row - 3) * 0.3 }
  for _, snap in ipairs(playArea.getSnapPoints()) do
    if math.abs(snap.position.x - pos.x) < 0.1 and math.abs(snap.position.z - pos.z) < 0.1 then
      return playArea.positionToWorld(Vector(snap.position.x, 0.2, snap.position.z))
    end
  end
end

-- get current position of player token
function getPlayerTokenGridPos(color)
  for _, obj in ipairs(getObjects()) do
    if obj.getName() == "Player" .. color then
      return convertPosToGrid(obj.getPosition())
    end
  end

  broadcastToAll("Couldn't find " .. color .. " player token.", "Orange")
end

function setPlayerTokenGridPos(params)
  for _, obj in ipairs(getObjects()) do
    if obj.getName() == "Player" .. params.color then
      obj.setPosition(convertGridToPos(params.grid))
      return
    end
  end

  broadcastToAll("Couldn't find " .. params.color .. " player token.", "Orange")
end

function getRelicTokenGridPos()
  for _, obj in ipairs(getObjects()) do
    if obj.getName() == "Relic" then
      return convertPosToGrid(obj.getPosition())
    end
  end

  broadcastToAll("Couldn't find relic token.", "Orange")
end
