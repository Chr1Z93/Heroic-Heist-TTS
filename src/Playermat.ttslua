require("CardMetadata")
local searchLib = require("SearchLib")

function onLoad()
  -- shared parameters
  local buttonParameters = {
    function_owner = self,
    height = 1000,
    width = 4000,
    scale = { 0.1, 0.1, 0.1 },
    font_size = 800,
    font_color = { 0, 0, 0 }
  }

  -- draw to three button
  buttonParameters.label = "Draw to 3"
  buttonParameters.click_function = "drawToThree"
  buttonParameters.position = { x = -1.243, y = 0.2, z = 1.2 }
  buttonParameters.tooltip = "Click to draw until you have 3 cards"
  self.createButton(buttonParameters)

  -- resolve card button
  buttonParameters.label = "Play Card"
  buttonParameters.click_function = "resolveCard"
  buttonParameters.position = { x = 1.243, y = 0.2, z = 1.2 }
  buttonParameters.tooltip = "Click to resolve the active card"
  self.createButton(buttonParameters)
end

-- starts resolving the active card (user input needed)
function resolveCard(_, playerColor)
  if playerColor ~= self.getMemo() then
    broadcastToColor("You should not be using this button.", playerColor, "Orange")
    return
  end

  -- get active card
  local searchPos = self.positionToWorld(Vector(-1.197, 0.2, 0.343))
  local searchResult = searchLib.atPosition(searchPos, "isCard")

  if #searchResult == 0 then
    broadcastToColor("Couldn't find active card.", playerColor, "Orange")
    return
  elseif #searchResult > 1 or searchResult[1].type == "Deck" then
    broadcastToColor("Detected multiple cards instead of one.", playerColor, "Orange")
    return
  end

  local card = searchResult[1]

  if card.is_face_down then
    card.flip()
  end

  -- get current position of player token
  local searchName = "Player" .. self.getMemo()
  local playerToken

  for _, obj in ipairs(getObjects()) do
    if obj.getName() == searchName then
      playerToken = obj
      break
    end
  end

  if not playerToken then
    broadcastToColor("Couldn't find player token.", playerColor, "Orange")
    return
  end

  broadcastToAll(self.getMemo() .. " is playing " .. card.getName() .. ".", "White")

  -- get data for card
  local md = METADATA[card.getGMNotes()]

  -- get player position
  local ids = Global.call("convertPosToId", playerToken.getPosition())

  log(ids)

  local newPos = Global.call("convertIdToPos", ids)

  log(newPos)
  
  -- display valid move locations


  -- display locations to deal damage to


  -- move card to discard pile


end

-- draws cards until there are 3 in the hand
function drawToThree(_, playerColor, _, retry)
  if playerColor ~= self.getMemo() then
    broadcastToColor("You should not be using this button.", playerColor, "Orange")
    return
  end

  -- count cards in hand
  local handObjects = Player[self.getMemo()].getHandObjects()
  local handCount = #handObjects

  if handCount > 2 then
    broadcastToColor("You already have 3 or more cards in your hand.", playerColor, "Orange")
    return
  end

  -- get draw deck
  local drawDeck = getDrawDeck()

  if not drawDeck then
    local discardPile = getDiscardPile()

    if retry or not discardPile then
      broadcastToColor("Didn't find deck or discard pile.", playerColor, "Orange")
      return
    end

    reshuffleDiscard()
    Wait.time(function() drawToThree(_, playerColor, _, true) end, 0.1)
    return
  end

  -- draw cards
  local amountToDraw = 3 - handCount

  if drawDeck.getQuantity() < amountToDraw then
    local discardPile = getDiscardPile()

    if retry or not discardPile then
      broadcastToColor("Deck is too small and didn't find discard pile to reshuffle.", playerColor, "Orange")
      return
    end

    reshuffleDiscard()
    Wait.time(function() drawToThree(_, playerColor, _, true) end, 0.1)
  else
    drawDeck.deal(amountToDraw, self.getMemo())
  end
end

function getDrawDeck()
  local deckPos = self.positionToWorld({ x = 1.243, y = 0.2, z = -0.11 })
  local searchResult = searchLib.atPosition(deckPos, "isCardOrDeck")
  if #searchResult == 1 then return searchResult[1] end
end

function getDiscardPile()
  local discardPos = self.positionToWorld({ x = 0.096, y = 0.2, z = -0.11 })
  local searchResult = searchLib.atPosition(discardPos, "isCardOrDeck")
  if #searchResult == 1 then return searchResult[1] end
end

function reshuffleDiscard()
  local discardPile = getDiscardPile()
  local deckPos = self.positionToWorld({ x = 1.243, y = 0.2, z = -0.11 })
  local rot = self.getRotation()
  discardPile.setRotation(rot:setAt("z", 180))
  discardPile.setPosition(deckPos)
end
