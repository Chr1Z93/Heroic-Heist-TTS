require("libraries/GuidReferences")

local searchLib = require("libraries/SearchLib")
local deckLib = require("libraries/DeckLib")

local deckPos = self.positionToWorld({ x = 1.243, y = 0.2, z = -0.11 })
local discardPos = self.positionToWorld({ x = 0.096, y = 0.2, z = -0.11 })

function onLoad()
  playArea = getObjectFromName("PlayArea")
  highlightBoard = getObjectFromName("HighlightBoard")

  local buttonParameters = {
    function_owner = self,
    height = 1000,
    width = 4000,
    scale = { 0.1, 0.1, 0.1 },
    font_size = 800,
    font_color = { 0, 0, 0 }
  }

  -- draw to three button
  buttonParameters.label = "Draw to 3"
  buttonParameters.click_function = "drawToThree"
  buttonParameters.position = { x = -1.243, y = 0.2, z = 1.2 }
  buttonParameters.tooltip = "Click to draw until you have 3 cards"
  self.createButton(buttonParameters)

  -- resolve card button
  buttonParameters.label = "Play Card"
  buttonParameters.click_function = "resolveCard"
  buttonParameters.position = { x = 1.243, y = 0.2, z = 1.2 }
  buttonParameters.tooltip = "Click to resolve the active card"
  self.createButton(buttonParameters)
end

-- starts resolving the active card (user input needed)
function resolveCard(_, playerColor)
  if not allowButtonAccess(playerColor) then return end

  local card = getActiveCard()
  if not card then
    return
  elseif card.is_face_down then
    card.flip()
  end

  local cardId = card.getGMNotes()
  local targetGridList = Global.call("getTargetsForCardId", {
    playerColor = playerColor,
    cardId = cardId
  })
  Global.call("displayTargetSelection", {
      playerColor = playerColor,
      cardId = cardId,
      targetGridList = targetGridList
    })
end

function discardActiveCard()
  deckLib.placeOrMergeIntoDeck(getActiveCard(), discardPos)
end

-- draws cards until there are 3 in the hand
function drawToThree(_, playerColor, _, retry)
  if not allowButtonAccess(playerColor) then return end

  -- count cards in hand
  local handObjects = Player[self.getMemo()].getHandObjects()
  local handCount = #handObjects

  if handCount > 2 then
    broadcastToColor("You already have 3 or more cards in your hand.", playerColor, "Orange")
    return
  end

  -- get draw deck
  local drawDeck = getDrawDeck()

  if not drawDeck then
    local discardPile = getDiscardPile()

    if retry or not discardPile then
      broadcastToColor("Didn't find deck or discard pile.", playerColor, "Orange")
      return
    end

    askToReshuffleDiscard(playerColor)
    return
  end

  -- draw cards
  local amountToDraw = 3 - handCount

  if drawDeck.getQuantity() < amountToDraw then
    local discardPile = getDiscardPile()

    if retry or not discardPile then
      broadcastToColor("Deck is too small and didn't find discard pile to reshuffle.", playerColor, "Orange")
      return
    end

    askToReshuffleDiscard(playerColor)
  else
    drawDeck.deal(amountToDraw, self.getMemo())
  end
end

function allowButtonAccess(playerColor)
  if playerColor ~= self.getMemo() then
    broadcastToColor("You should not be using this button.", playerColor, "Orange")
    return false
  else
    return true
  end
end

-- returns a reference to the draw deck
function getDrawDeck()
  local searchResult = searchLib.atPosition(deckPos, "isCardOrDeck")
  if #searchResult == 1 then return searchResult[1] end
end

-- returns a reference to the discard pile
function getDiscardPile()
  local searchResult = searchLib.atPosition(discardPos, "isCardOrDeck")
  if #searchResult == 1 then return searchResult[1] end
end

-- returns a reference to the active card
function getActiveCard()
  local searchPos = self.positionToWorld(Vector(-1.197, 0.2, 0.343))
  local searchResult = searchLib.atPosition(searchPos, "isCardOrDeck")
  local color = self.getMemo() or ""

  if #searchResult == 0 then
    broadcastToColor("Couldn't find active card.", color, "Orange")
  elseif #searchResult > 1 or searchResult[1].type == "Deck" then
    broadcastToColor("Detected multiple cards instead of one.", color, "Orange")
  else
    return searchResult[1]
  end
end

function askToReshuffleDiscard(playerColor)
  local enemyColor = oppositeColor(playerColor)

  if Player[enemyColor] then
    Player[enemyColor].showConfirmDialog("The enemy is about to reshuffle their discard pile. Please confirm to proceed.",
      function ()
        reshuffleDiscard(playerColor)
      end
    )
  else
    reshuffleDiscard(playerColor)
  end
end

function reshuffleDiscard(playerColor)
  local discardPile = getDiscardPile()
  local deckPos = self.positionToWorld({ x = 1.243, y = 0.2, z = -0.11 })
  discardPile.setRotation(self.getRotation():setAt("z", 180))
  discardPile.setPosition(deckPos)
  Wait.time(function() drawToThree(_, playerColor, _, true) end, 0.1)
end

function oppositeColor(color)
  if color == "Blue" then
    return "Red"
  else
    return "Blue"
  end
end
