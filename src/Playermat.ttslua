require("CardMetadata")
local searchLib = require("SearchLib")

local resolveButtonParameters = {
  function_owner = self,
  height = 1000,
  width = 1000,
  scale = { 0.1, 0.1, 0.1 }
}

function onLoad()
  playArea = getObjectFromGUID("5ef1de")

  -- shared parameters
  local buttonParameters = {
    function_owner = self,
    height = 1000,
    width = 4000,
    scale = { 0.1, 0.1, 0.1 },
    font_size = 800,
    font_color = { 0, 0, 0 }
  }

  -- draw to three button
  buttonParameters.label = "Draw to 3"
  buttonParameters.click_function = "drawToThree"
  buttonParameters.position = { x = -1.243, y = 0.2, z = 1.2 }
  buttonParameters.tooltip = "Click to draw until you have 3 cards"
  self.createButton(buttonParameters)

  -- resolve card button
  buttonParameters.label = "Play Card"
  buttonParameters.click_function = "resolveCard"
  buttonParameters.position = { x = 1.243, y = 0.2, z = 1.2 }
  buttonParameters.tooltip = "Click to resolve the active card"
  self.createButton(buttonParameters)
end

-- starts resolving the active card (user input needed)
function resolveCard(_, playerColor)
  if playerColor ~= self.getMemo() then
    broadcastToColor("You should not be using this button.", playerColor, "Orange")
    return
  end

  -- get active card
  local searchPos = self.positionToWorld(Vector(-1.197, 0.2, 0.343))
  local searchResult = searchLib.atPosition(searchPos, "isCard")

  if #searchResult == 0 then
    broadcastToColor("Couldn't find active card.", playerColor, "Orange")
    return
  elseif #searchResult > 1 or searchResult[1].type == "Deck" then
    broadcastToColor("Detected multiple cards instead of one.", playerColor, "Orange")
    return
  end

  local card = searchResult[1]

  if card.is_face_down then
    card.flip()
  end

  -- get current position of player token
  local searchName = "Player" .. self.getMemo()
  local playerToken

  for _, obj in ipairs(getObjects()) do
    if obj.getName() == searchName then
      playerToken = obj
      break
    end
  end

  if not playerToken then
    broadcastToColor("Couldn't find player token.", playerColor, "Orange")
    return
  end

  broadcastToAll(self.getMemo() .. " is playing " .. card.getName() .. ".", "White")

  -- remove current buttons
  playArea.clearButtons()

  -- get data for card
  local md = METADATA[card.getGMNotes()]

  -- get player position
  local grid = Global.call("convertPosToGrid", playerToken.getPosition())

  -- get target locations
  local direction = { Blue = -1, Red = 1 }
  local mult = direction[self.getMemo()]
  local targetGridList = {}

  -- loop areas
  for _, data in ipairs(md.targetAreas or {}) do
    -- increase by 5 to avoid negative numbers
    local start1 = data.c1[1] + 5
    local end1 = data.c2[1] + 5
    local start2 = data.c1[2] + 5
    local end2 = data.c2[2] + 5
    local step1 = (start1 >= end1) and -1 or 1
    local step2 = (start2 >= end2) and -1 or 1
    --log(start1 .. "|" .. end1 .. "|" .. step1)
    --log(start2 .. "|" .. end2 .. "|" .. step2)
    for i = start1, end1, step1 do
      for j = start2, end2, step2 do
        local newTarget = { row = grid.row + (j - 5) * mult, col = grid.col + (i - 5) * mult }
        --log(newTarget)
        if validateTarget(newTarget) then
          table.insert(targetGridList, newTarget)
        end
      end
    end
  end

  -- loop spots
  for _, data in ipairs(md.targetSpots or {}) do
    local newTarget = { row = grid.row + data[2] * mult, col = grid.col + data[1] * mult }
    if validateTarget(newTarget) then
      table.insert(targetGridList, newTarget)
    end
  end

  -- display a button for each location
  for _, targetGrid in ipairs(targetGridList) do
    local newPos = Global.call("convertGridToPos", targetGrid)
    Player["Blue"].pingTable(newPos)

    -- resolveButtonParameters.position = playArea.positionToLocal(newPos)
    -- resolveButtonParameters.click_function = "drawToThree"
    -- playArea.createButton(resolveButtonParameters)
  end

  -- move card to discard pile
end

function validateTarget(targetGrid)
  if targetGrid.row > 0 and targetGrid.row < 6 and targetGrid.col > 0 and targetGrid.col < 6 then
    return true
  else
    return false
  end
end

-- draws cards until there are 3 in the hand
function drawToThree(_, playerColor, _, retry)
  if playerColor ~= self.getMemo() then
    broadcastToColor("You should not be using this button.", playerColor, "Orange")
    return
  end

  -- count cards in hand
  local handObjects = Player[self.getMemo()].getHandObjects()
  local handCount = #handObjects

  if handCount > 2 then
    broadcastToColor("You already have 3 or more cards in your hand.", playerColor, "Orange")
    return
  end

  -- get draw deck
  local drawDeck = getDrawDeck()

  if not drawDeck then
    local discardPile = getDiscardPile()

    if retry or not discardPile then
      broadcastToColor("Didn't find deck or discard pile.", playerColor, "Orange")
      return
    end

    reshuffleDiscard()
    Wait.time(function() drawToThree(_, playerColor, _, true) end, 0.1)
    return
  end

  -- draw cards
  local amountToDraw = 3 - handCount

  if drawDeck.getQuantity() < amountToDraw then
    local discardPile = getDiscardPile()

    if retry or not discardPile then
      broadcastToColor("Deck is too small and didn't find discard pile to reshuffle.", playerColor, "Orange")
      return
    end

    reshuffleDiscard()
    Wait.time(function() drawToThree(_, playerColor, _, true) end, 0.1)
  else
    drawDeck.deal(amountToDraw, self.getMemo())
  end
end

function getDrawDeck()
  local deckPos = self.positionToWorld({ x = 1.243, y = 0.2, z = -0.11 })
  local searchResult = searchLib.atPosition(deckPos, "isCardOrDeck")
  if #searchResult == 1 then return searchResult[1] end
end

function getDiscardPile()
  local discardPos = self.positionToWorld({ x = 0.096, y = 0.2, z = -0.11 })
  local searchResult = searchLib.atPosition(discardPos, "isCardOrDeck")
  if #searchResult == 1 then return searchResult[1] end
end

function reshuffleDiscard()
  local discardPile = getDiscardPile()
  local deckPos = self.positionToWorld({ x = 1.243, y = 0.2, z = -0.11 })
  local rot = self.getRotation()
  discardPile.setRotation(rot:setAt("z", 180))
  discardPile.setPosition(deckPos)
end
