local searchLib        = require("libraries/SearchLib")
local deckLib          = require("libraries/DeckLib")

local deckPos          = self.positionToWorld({ x = 0.685,  y = 0.2, z = 0.602 })
local discardPos       = self.positionToWorld({ x = 0,      y = 0.2, z = 0.602 })
local playedCardPos    = self.positionToWorld({ x = -0.685, y = 0.2, z = 0.546 })

local deckDisplaySlot1 = Vector(-0.767, 0.25, -0.693)
local deckDisplaySlot8 = Vector(0.385, 0.25, -0.18)
local deckDisplaySlots = {}
local speed            = 0
local displayId        = "0000"

local selfColor, enemyColor

function onSave() return speed end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    speed = tonumber(savedData)
  end

  math.randomseed(os.time())
  selfColor = self.getMemo()
  enemyColor = oppositeColor(selfColor)
  createButtons()
  makeDeckDisplaySlots()
  Wait.time(updateDisplay, 2, -1)
end

function createButtons()
  self.clearButtons()

  -- speed button
  self.createButton({
    function_owner = self,
    height = 0,
    width = 0,
    scale = { 0.2, 0.2, 0.2 },
    font_size = speedFontSize(),
    font_color = "White",
    label = speed,
    click_function = "none",
    position = { x = -0.3, y = 0.2, z = 0.141 }
  })

  -- hero ID button
  self.createButton({
    function_owner = self,
    height = 0,
    width = 0,
    scale = { 0.2, 0.2, 0.2 },
    font_size = 300,
    font_color = "White",
    label = displayId,
    click_function = "none",
    position = { x = 0.8, y = 0.2, z = 0.141 }
  })

  --[[ get direction to global left
  local pos = self.positionToLocal(Vector(38, 0, 0))
  local dirX = pos.x / math.abs(pos.x)
  position = Vector(dirX * 1.25, 0.2, 0.5)
  ]]
  -- claim this seat button
  self.createButton({
    function_owner = self,
    click_function = "claimSeat",
    label = "Claim\n" .. selfColor,
    tooltip = "Click to claim this seat",
    position = Vector(0, 0.2, 1.25),
    height = 1750,
    width = 2000,
    color = selfColor,
    scale = { 0.1, 0.1, 0.1 },
    font_size = 700,
    font_color = { 1, 1, 1 }
  })

  -- buttons below mat
  local buttonParameters = {
    function_owner = self,
    height = 1000,
    width = 4000,
    scale = { 0.06, 0.06, 0.06 },
    font_size = 800,
    font_color = { 0, 0, 0 }
  }

  -- draw to three button
  buttonParameters.label = "Draw to 3"
  buttonParameters.click_function = "drawToThree"
  buttonParameters.position = { x = -0.65, y = 0.2, z = 1.1 }
  buttonParameters.tooltip = "Click to draw until you have 3 cards"
  self.createButton(buttonParameters)

  -- play card button
  buttonParameters.label = "Play Card"
  buttonParameters.click_function = "playCard"
  buttonParameters.position = { x = 0.65, y = 0.2, z = 1.1 }
  buttonParameters.tooltip = "Click to resolve the active card"
  self.createButton(buttonParameters)
end

function speedFontSize()
  return (speed == 100) and 250 or 350
end

function makeDeckDisplaySlots()
  deckDisplaySlots = {}

  local columns = 4
  local rows = 2

  local spacingX = (deckDisplaySlot8.x - deckDisplaySlot1.x) / (columns - 1)
  local spacingZ = (deckDisplaySlot8.z - deckDisplaySlot1.z) / (rows - 1)

  for row = 0, rows - 1 do
    for col = 0, columns - 1 do
      local slotX = deckDisplaySlot1.x + (col + 1) * spacingX
      local slotZ = deckDisplaySlot1.z + row * spacingZ
      table.insert(deckDisplaySlots, self.positionToWorld(Vector(slotX, deckDisplaySlot1.y, slotZ)))
    end
  end
end

function claimSeat(_, playerColor)
  if not Player[selfColor].seated then
    Player[playerColor].changeColor(selfColor)
  end
end

-- starts resolving the active card (user input needed)
function playCard(_, playerColor)
  if not allowButtonAccess(playerColor) then return end

  -- check if card is ready to be played
  local card = getActiveCard()
  if not card then return end

  local enemyMat = Global.getVar("Playermat" .. enemyColor)
  local enemyCard = enemyMat.call("getActiveCard")
  if not enemyCard then return end

  local cardId = card.getGMNotes()
  Global.call("displayTargetSelection", {
    playerColor = playerColor,
    cardId = cardId
  })
end

function discardActiveCard()
  deckLib.placeOrMergeIntoDeck(getActiveCard(), discardPos, self.getRotation())
end

function forceFaceUpActiveCard()
  local card = getActiveCard()
  card.setRotation(card.getRotation():setAt("z", 0))
end

-- draws cards until there are 3 in the hand
function drawToThree(_, playerColor, _, retry)
  if not allowButtonAccess(playerColor) then return end

  local handObjects = Player[selfColor].getHandObjects()
  if #handObjects > 2 then
    broadcastToColor("You already have 3 or more cards in your hand.", playerColor, "Orange")
    return
  end

  -- get draw deck
  local drawDeck = getDrawDeck()

  if not drawDeck then
    local discardPile = getDiscardPile()

    if retry or not discardPile then
      broadcastToColor("Didn't find deck or discard pile.", playerColor, "Orange")
      return
    end

    askToReshuffleDiscard(playerColor)
    return
  end

  -- draw cards
  local amountToDraw = 3 - #handObjects

  if drawDeck.getQuantity() < amountToDraw then
    local discardPile = getDiscardPile()

    if retry or not discardPile then
      broadcastToColor("Deck is too small and didn't find discard pile to reshuffle.", playerColor, "Orange")
      return
    end

    askToReshuffleDiscard(playerColor)
  else
    drawDeck.deal(amountToDraw, selfColor)
  end
  broadcastToAll(getColoredName(playerColor) .. " drew " .. amountToDraw .. " card(s).")
end

function allowButtonAccess(playerColor)
  if playerColor ~= selfColor then
    broadcastToColor("You should not be using this button.", playerColor, "Orange")
    return false
  else
    return true
  end
end

function resetDeck()
  local searchResult = {}

  -- add hand objects
  for _, card in ipairs(Player[selfColor].getHandObjects()) do
    table.insert(searchResult, card)
  end

  -- add deck
  local deck = getDrawDeck()
  if deck then
    table.insert(searchResult, deck)
  end

  -- add discard
  local discard = getDiscardPile()
  if discard then
    table.insert(searchResult, discard)
  end

  -- add active card
  local active = getActiveCard(true)
  if active then
    table.insert(searchResult, active)
  end

  -- place cards as new deck
  local groupList = group(searchResult)
  if not groupList[1] then return end
  groupList[1].setPosition(deckPos)
  ---@diagnostic disable-next-line: param-type-mismatch
  groupList[1].setRotation(self.getRotation():setAt("z", 180))
  Wait.time(function() groupList[1].shuffle() end, 0.2)
end

-- returns a reference to the draw deck
function getDrawDeck()
  local searchResult = searchLib.atPosition(deckPos, "isCardOrDeck")
  if #searchResult == 1 then return searchResult[1] end
end

-- returns a reference to the discard pile
function getDiscardPile()
  local searchResult = searchLib.atPosition(discardPos, "isCardOrDeck")
  if #searchResult == 1 then return searchResult[1] end
end

function getPlayedCardPos()
  return playedCardPos
end

-- returns a reference to the active card
function getActiveCard(noLog)
  local searchResult = searchLib.atPosition(playedCardPos, "isCardOrDeck")

  if #searchResult == 0 then
    if not noLog then
      broadcastToAll("Couldn't find active card for " .. selfColor .. ".", "Orange")
    end
  elseif #searchResult > 1 or searchResult[1].type == "Deck" then
    broadcastToAll("Detected multiple cards instead of one for " .. selfColor .. ".", "Orange")
  else
    return searchResult[1]
  end
end

function askToReshuffleDiscard(playerColor)
  if Player[enemyColor].seated then
    Player[enemyColor].showConfirmDialog(
      "The enemy is about to reshuffle their discard pile. Please confirm to proceed.",
      function() reshuffleDiscard(playerColor) end
    )
  else
    reshuffleDiscard(playerColor)
  end
end

function reshuffleDiscard(playerColor)
  local discardPile = getDiscardPile()
  discardPile.setRotation(self.getRotation():setAt("z", 180))
  discardPile.setPosition(deckPos)
  Wait.time(function() drawToThree(_, playerColor, _, true) end, 0.1)
end

function oppositeColor(color)
  if color == "Blue" then
    return "Red"
  else
    return "Blue"
  end
end

function getColoredName(playerColor)
  local displayName = playerColor
  if Player[playerColor].steam_name then
    displayName = Player[playerColor].steam_name
  end

  -- add bb-code
  return "[" .. Color.fromString(playerColor):toHex() .. "]" .. displayName .. "[-]"
end

--------------------------------------------------------------
------------------------ Deck Mat Logic-----------------------
--------------------------------------------------------------

function setNewSpeed(newSpeed)
  speed = newSpeed
  self.editButton({ index = 0, label = speed, font_size = speedFontSize() })
end

function setDisplayId(newId)
  displayId = newId
  self.editButton({ index = 1, label = newId })
end

function getSpeed()
  return speed
end

function updateDisplay()
  -- get rotation of playermat
  local selfRot = self.getRotation()

  -- get list of new cards
  local cardDataList = {}

  -- cards in hand (will be displayed face-up)
  for _, card in ipairs(Player[selfColor].getHandObjects()) do
    local data = card.getData()
    data.Transform.rotX = selfRot.x
    data.Transform.rotY = selfRot.y
    data.Transform.rotZ = 0
    table.insert(cardDataList, data)
  end

  -- cards in deck / discard / to be played (will be displayed opposite of current rotation)
  local pos = self.positionToWorld(Vector(0, 0, 0.6))
  for _, obj in ipairs(searchLib.inArea(pos, nil, Vector(25, 1, 10), "isCardOrDeck")) do
    if obj.type == "Card" then
      local data = obj.getData()
      data.Transform.rotX = selfRot.x
      data.Transform.rotY = selfRot.y
      data.Transform.rotZ = obj.getRotation().z + 180
      table.insert(cardDataList, data)
    else
      local deckRotationZ = obj.is_face_down and 180 or 0
      for _, cardData in ipairs(obj.getData().ContainedObjects) do
        cardData.Transform.rotX = selfRot.x
        cardData.Transform.rotY = selfRot.y
        cardData.Transform.rotZ = deckRotationZ + 180
        table.insert(cardDataList, cardData)
      end
    end
  end

  -- skip this update if not 8 cards found
  if #cardDataList ~= 8 then return end

  -- sort list by id
  table.sort(cardDataList, function(a, b) return a.GMNotes < b.GMNotes end)

  -- remove current cards
  local pos2 = self.positionToWorld(Vector(0, 0, -0.4))
  for _, obj in ipairs(searchLib.inArea(pos2, nil, Vector(25, 1, 12), "isCardOrDeck")) do
    obj.destruct()
  end

  -- spawn the card list
  for i, data in ipairs(cardDataList) do
    -- force correct position before spawning
    data.Transform.posX = deckDisplaySlots[i].x
    data.Transform.posY = deckDisplaySlots[i].y
    data.Transform.posZ = deckDisplaySlots[i].z
    data.Locked = true
    data.Tooltip = false

    spawnObjectData({ data = data })
  end
end

function getDeckPos()
  return deckPos
end
