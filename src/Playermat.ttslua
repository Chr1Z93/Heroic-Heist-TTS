local searchLib = require("libraries/SearchLib")
local deckLib = require("libraries/DeckLib")

local deckPos = self.positionToWorld({ x = 1.243, y = 0.2, z = -0.11 })
local discardPos = self.positionToWorld({ x = 0.096, y = 0.2, z = -0.11 })

function onLoad()
  math.randomseed(os.time())
  enemyColor = oppositeColor(self.getMemo())
  createButtons()
end

function createButtons()
  self.clearButtons()

  -- get direction to global left
  local pos = self.positionToLocal(Vector(38, 0, 0))
  local dirX = pos.x / math.abs(pos.x)

  -- claim this seat button
  self.createButton({
    function_owner = self,
    click_function = "claimSeat",
    label = "Claim\n" .. self.getMemo(),
    tooltip = "Click to claim this seat",
    position = { x = dirX * 2.3, y = 0.2, z = -0.65 },
    height = 1750,
    width = 2000,
    color = self.getMemo(),
    scale = { 0.17, 0.17, 0.17 },
    font_size = 600,
    font_color = { 1, 1, 1 }
  })

  -- buttons below mat
  local buttonParameters = {
    function_owner = self,
    height = 1000,
    width = 4000,
    scale = { 0.1, 0.1, 0.1 },
    font_size = 800,
    font_color = { 0, 0, 0 }
  }

  -- draw to three button
  buttonParameters.label = "Draw to 3"
  buttonParameters.click_function = "drawToThree"
  buttonParameters.position = { x = -1.243, y = 0.2, z = 1.2 }
  buttonParameters.tooltip = "Click to draw until you have 3 cards"
  self.createButton(buttonParameters)

  -- play card button
  buttonParameters.label = "Play Card"
  buttonParameters.click_function = "playCard"
  buttonParameters.position = { x = 1.243, y = 0.2, z = 1.2 }
  buttonParameters.tooltip = "Click to resolve the active card"
  self.createButton(buttonParameters)
end

function claimSeat(_, playerColor)
  if not Player[self.getMemo()].seated then
    Player[playerColor].changeColor(self.getMemo())
  end
end

-- starts resolving the active card (user input needed)
function playCard(_, playerColor)
  if not allowButtonAccess(playerColor) then return end

  -- check if card is ready to be played
  local card = getActiveCard()
  if not card then return end

  local enemyMat = Global.getVar("Playermat" .. enemyColor)
  local enemyCard = enemyMat.call("getActiveCard")
  if not enemyCard then return end

  local cardId = card.getGMNotes()
  Global.call("displayTargetSelection", {
    playerColor = playerColor,
    cardId = cardId
  })
end

function discardActiveCard()
  deckLib.placeOrMergeIntoDeck(getActiveCard(), discardPos, self.getRotation())
end

function forceFaceUpActiveCard()
  local card = getActiveCard()
  card.setRotation(card.getRotation():setAt("z", 0))
end

-- draws cards until there are 3 in the hand
function drawToThree(_, playerColor, _, retry)
  if not allowButtonAccess(playerColor) then return end

  local handObjects = Player[self.getMemo()].getHandObjects()
  if #handObjects > 2 then
    broadcastToColor("You already have 3 or more cards in your hand.", playerColor, "Orange")
    return
  end

  -- get draw deck
  local drawDeck = getDrawDeck()

  if not drawDeck then
    local discardPile = getDiscardPile()

    if retry or not discardPile then
      broadcastToColor("Didn't find deck or discard pile.", playerColor, "Orange")
      return
    end

    askToReshuffleDiscard(playerColor)
    return
  end

  -- draw cards
  local amountToDraw = 3 - #handObjects

  if drawDeck.getQuantity() < amountToDraw then
    local discardPile = getDiscardPile()

    if retry or not discardPile then
      broadcastToColor("Deck is too small and didn't find discard pile to reshuffle.", playerColor, "Orange")
      return
    end

    askToReshuffleDiscard(playerColor)
  else
    drawDeck.deal(amountToDraw, self.getMemo())
  end
end

function allowButtonAccess(playerColor)
  if playerColor ~= self.getMemo() then
    broadcastToColor("You should not be using this button.", playerColor, "Orange")
    return false
  else
    return true
  end
end

function resetDeck()
  local searchResult = {}

  -- add hand objects
  for _, card in ipairs(Player[self.getMemo()].getHandObjects()) do
    table.insert(searchResult, card)
  end

  -- add deck
  local deck = getDrawDeck()
  if deck then
    table.insert(searchResult, deck)
  end

  -- add discard
  local discard = getDiscardPile()
  if discard then
    table.insert(searchResult, discard)
  end

  -- add active card
  local active = getActiveCard(true)
  if active then
    table.insert(searchResult, active)
  end

  -- place cards as new deck
  local groupList = group(searchResult)
  if not groupList[1] then return end
  groupList[1].setPosition(deckPos)
  ---@diagnostic disable-next-line: param-type-mismatch
  groupList[1].setRotation(self.getRotation():setAt("z", 180))
  Wait.time(function() groupList[1].shuffle() end, 0.2)
end

-- returns a reference to the draw deck
function getDrawDeck()
  local searchResult = searchLib.atPosition(deckPos, "isCardOrDeck")
  if #searchResult == 1 then return searchResult[1] end
end

-- returns a reference to the discard pile
function getDiscardPile()
  local searchResult = searchLib.atPosition(discardPos, "isCardOrDeck")
  if #searchResult == 1 then return searchResult[1] end
end

-- returns a reference to the active card
function getActiveCard(noLog)
  local searchPos = self.positionToWorld(Vector(-1.197, 0.2, 0.343))
  local searchResult = searchLib.atPosition(searchPos, "isCardOrDeck")

  if #searchResult == 0 then

    if not noLog then
      broadcastToAll("Couldn't find active card for " .. self.getMemo() .. ".", "Orange")
    end
  elseif #searchResult > 1 or searchResult[1].type == "Deck" then
    broadcastToAll("Detected multiple cards instead of one for " .. self.getMemo() .. ".", "Orange")
  else
    return searchResult[1]
  end
end

function askToReshuffleDiscard(playerColor)
  if Player[enemyColor].seated then
    Player[enemyColor].showConfirmDialog(
      "The enemy is about to reshuffle their discard pile. Please confirm to proceed.",
      function() reshuffleDiscard(playerColor) end
    )
  else
    reshuffleDiscard(playerColor)
  end
end

function reshuffleDiscard(playerColor)
  local discardPile = getDiscardPile()
  local deckPos = self.positionToWorld({ x = 1.243, y = 0.2, z = -0.11 })
  discardPile.setRotation(self.getRotation():setAt("z", 180))
  discardPile.setPosition(deckPos)
  Wait.time(function() drawToThree(_, playerColor, _, true) end, 0.1)
end

function oppositeColor(color)
  if color == "Blue" then
    return "Red"
  else
    return "Blue"
  end
end

-- shows / hides the "Play a card" button
function togglePlayButton()
  local buttonData = self.getButtons()

  if #buttonData == 3 then
    self.removeButton(2)
  else
    createButtons()
  end
end
